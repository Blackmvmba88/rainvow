name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    # Ejecutar revisión automática todos los lunes a las 9:00 UTC
    - cron: '0 9 * * 1'

jobs:
  lint:
    name: Análisis de Código (Linting)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Instalar dependencias de linting
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint black isort
    
    - name: Análisis con flake8
      run: |
        # Análisis de errores críticos
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      continue-on-error: false
    
    - name: Verificar formateo con black
      run: |
        black --check --diff .
      continue-on-error: true
    
    - name: Verificar imports con isort
      run: |
        isort --check-only --diff .
      continue-on-error: true

  test:
    name: Pruebas Unitarias
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        # Instalar dependencias del proyecto (sin audio/hardware)
        pip install flask spotipy numpy rich colorama psutil
    
    - name: Ejecutar pruebas
      run: |
        # Si existen pruebas, ejecutarlas
        if [ -d "tests" ] || [ -f "test_*.py" ]; then
          pytest --cov=. --cov-report=xml --cov-report=term
        else
          echo "No se encontraron pruebas automatizadas"
        fi
      continue-on-error: true
    
    - name: Validar sintaxis de Python
      run: |
        python -m py_compile spotify_live/app.py
        python -m py_compile ondads.py
        python -m py_compile keyboard_rgb.py
        python -m py_compile hydra_observer.py
        python -m py_compile screenshot.py
        python -m py_compile pentaquark.py

  security:
    name: Análisis de Seguridad
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Instalar herramientas de seguridad
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Análisis con bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
      continue-on-error: true
    
    - name: Verificar dependencias vulnerables
      run: |
        pip install -r requirements.txt
        safety check --json || true
      continue-on-error: true

  documentation:
    name: Verificación de Documentación
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Verificar archivos de documentación
      run: |
        echo "Verificando documentación requerida..."
        test -f README.md && echo "✅ README.md existe"
        test -f CHANGELOG.md && echo "✅ CHANGELOG.md existe"
        test -f ARCHITECTURE.md && echo "✅ ARCHITECTURE.md existe"
        test -f TESTING.md && echo "✅ TESTING.md existe"
        test -f TEAM.md && echo "✅ TEAM.md existe"
        test -f requirements.txt && echo "✅ requirements.txt existe"
        echo "Verificación de documentación completada"

  notify:
    name: Notificaciones y Alertas
    runs-on: ubuntu-latest
    needs: [lint, test, security, documentation]
    if: always()
    
    steps:
    - name: Resumen de resultados
      run: |
        echo "## Resumen de CI/CD Pipeline"
        echo "- Linting: ${{ needs.lint.result }}"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Security: ${{ needs.security.result }}"
        echo "- Documentation: ${{ needs.documentation.result }}"
        
        if [ "${{ needs.lint.result }}" == "failure" ] || [ "${{ needs.test.result }}" == "failure" ]; then
          echo "⚠️ ALERTA: Fallos detectados en el pipeline"
          exit 1
        fi
